// C文件
///* 引用头文件 ------------------------------------------------------------------*/  
//#include "./rcc_clkconfig/rcc_clkconfig.h"  //引用RCC时钟配置头文件

///* 定义全局变量 ------------------------------------------------------------------*/

///* 程序开始 ----------------------------------------------------------------------*/


///* END OF FILE ------------------------------------------------------------------*/


// H文件
///**
//  ******************************************************************************
//  * @file     （程序名）	  	main.h
//  * @author （程序作者）		Lu
//  * @version（程序版本）		V1.0.0.0
//  * @date   （修改日期）		2024-xx-xx
//  * @brief  （功能简介）		STM32F103VET6固件库模板
//  * @parameter  （参数）		无
//  * @return   （返回值）		无
//  ******************************************************************************
//  * @attention （注意事项）
//  * 芯片型号：STM32F103VET6
//  * 使用引脚：
//  * 修改日期：
//  * 实现功能：
//  *	
//  ******************************************************************************
//  */
///*------------------------------------------------------------------------------*/

//#ifndef __MAIN_H
//#define __MAIN_H
///* 用户头文件 ------------------------------------------------------------------*/
//#ifdef      FreeRTOS_OS
///* FreeRTOS头文件 */
//#include "FreeRTOS.h"
//#include "task.h"
//#include "queue.h"
//#include "semphr.h"
//#include "main.h"

//#else
//#include "stm32f10x.h"   //引用stm32头文件
//#include "main.h"
//#endif  //FreeRTOS_OS

///* 宏定义 ----------------------------------------------------------------------*/


///* 函数声明 --------------------------------------------------------------------*/


//#endif  /*  __MAIN_H */

///* END OF FILE ------------------------------------------------------------------*/


/**
  **********************************************************************
  * @brief  获取空闲任务的任务堆栈和任务控制块内存
  *			ppxTimerTaskTCBBuffer	:		任务控制块内存
  *			ppxTimerTaskStackBuffer	:		任务堆栈内存
  *			pulTimerTaskStackSize	:		任务堆栈大小
  * @author  Lu
  * @version V1.0
  * @date    2024-xx-xx
  **********************************************************************
  */ 
  
/**
  **********************************************************************
  * @brief  获取空闲任务的任务堆栈和任务控制块内存
  * @param	ppxTimerTaskTCBBuffer	:		任务控制块内存
  * @retval pulTimerTaskStackSize	:		任务堆栈大小
  * @author  Lu
  * @version V1.0
  * @date    2024-xx-xx
  **********************************************************************
  */ 

///**
// * @brief	：主函数
// * @param	：参数说明
// * @arg		：参数里面可选择参量列举
// * @note	：注释
// * @retval	：返回值说明
// * @doc		：无
// */


///**
//  * @brief	：对函数简要描述
//  * @param	：参数说明，以’:’作为参数结束标志
//  * @arg	：参数里面可选择参量列举，对于可数情况可进行参量列举，同样以’:’作为参数结束标志；
//  * @note	：注释，配合brief一起使用可以达到很好的注释效果；
//  * @retval	：返回值说明。
//  * @doc	：无
//  */

///**
// * @brief     ：主函数
// * @param     ：无
// * @retval	：无
// * @doc		：无
// */

///**
// * @SARMCM3.DLL：-REMAP
// * @SARMCM3.DLL：-REMAP
// * @DARMSTM.DLL：-pSTM32F103VE
// * @TARMSTM.DLL：-pSTM32F103VE
// * PORTA.0：PA0
// */

//void delay_us(uint32_t nTime)
//{
//    uint32_t ticks,told,tnow,tcnt=0;
//    uint32_t reload = SysTick->LOAD; //获取LOAD的值
//    ticks = nTime*(SystemCoreClock/1000000);//需要的节拍数
//    tcnt = 0;
//    vTaskSuspendAll(); //阻止OS调度，防止打断us延时
//    told = SysTick->VAL;//刚进入时的计数器值
//    while(1)
//    {
//        tnow = SysTick->VAL;
//        if(tnow != told)
//        {
//            if(tnow<told)tcnt+=told-tnow;
//            else tcnt+=reload-tnow+told;
//            told = tnow;
//            if(tcnt>=ticks)break;//时间超过，退出延时
//        }
//    }
//   xTaskResumeAll();    //恢复OS调度
//}
